steps:
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', 'docker login --username=$$DOCKER_HUB_USERNAME --password=$$DOCKER_HUB_PASSWORD']
  secretEnv: ['DOCKER_HUB_USERNAME', 'DOCKER_HUB_PASSWORD']

# Build foo app
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', 'docker build -t $$DOCKER_HUB_USERNAME/k8s-gateway-demo:${SHORT_SHA} .']
  secretEnv: ['DOCKER_HUB_USERNAME']
  dir: apps/foo-app
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', 'docker push $$DOCKER_HUB_USERNAME/k8s-gateway-demo:${SHORT_SHA}']
  secretEnv: ['DOCKER_HUB_USERNAME']
  dir: apps/foo-app

# Render New Deployment config with new container version and commit to config-sync-app-owner repo
- name: 'gcr.io/google-samples/cloudbuild-kustomize:latest'
  id: Render New Deployment and Commit to config-sync-app-owner repo
  entrypoint: 'bash'
  args:
  - '-eEuo'
  - 'pipefail'
  - '-c'
  - |-
    git clone https://github.com/$$GITHUB_USERNAME/sp1-config-sync-app-owner && \
    cd sp1-config-sync-app-owner 
    git config user.email $$GITHUB_EMAIL
    git config user.name $$GITHUB_USERNAME 
    git remote set-url origin https://$$GITHUB_USERNAME:$$GITHUB_TOKEN@github.com/$$GITHUB_USERNAME/sp1-config-sync-app-owner.git
    cd ../config-ci-cd

    sed -i 's/__VERSION__/'"$SHORT_SHA"'/g' overlays/deployment/kustomization.yaml
    kustomize build overlays/deployment --output ../sp1-config-sync-app-owner/gateway-api-demo-app-"$SHORT_SHA".yaml

    cd ../sp1-config-sync-app-owner 

    rm README.md 
    echo "Update foo-app to version: ${SHORT_SHA}" > README.md

    git add . && \
    git commit -m "Rendered: ${SHORT_SHA}
    Built from commit ${COMMIT_SHA} of repository foo-config-source - main branch 
    Author: $(git log --format='%an <%ae>' -n 1 HEAD)" && \
    git push origin main
    cd ..
  secretEnv: ['GITHUB_EMAIL', 'GITHUB_USERNAME', 'GITHUB_TOKEN']

# Render HTTPRoute 
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
  id: Render New HTTPRoute and Commit to config-sync-app-owner repo
  entrypoint: 'bash'
  args:
  - '-eEuo'
  - 'pipefail'
  - '-c'
  - |-
    echo "Current Directory is -------"
    pwd
    cd config-ci-cd
    
    # Consider a better way to ensure new version of the app/service is deployed
    sleep 15 
    
    # Please change this Cluster Name here. 
    gcloud container clusters get-credentials sp1-cluster --region=us-east1

    # We are retrieving the deployed services and the GIT-SHA from the service names to identify the previous deployment which is currently servicing live traffic. 
    # In real world we will retrieve it from the Cloud Build API and find out the last 'successful' build and its associated GIT-SHA.
    kubectl get service -n foo --sort-by=.metadata.creationTimestamp > services.txt 2> errors.txt
    if [[ $(echo $?) -eq 0 ]];
    then 
      echo "Got the services"
      cat services.txt
      cat services.txt | awk '{print $1}' | tail -n +2 > svc-names.txt
      echo svc-names.txt
      export _NO_OF_SERVICES=$(cat svc-names.txt | wc -l)
      echo ${_NO_OF_SERVICES}
      if [[ ${_NO_OF_SERVICES} == 2 ]]; 
      then 
        echo "Got 2 services"; 
        export _SERVICE_N_SHA = $(echo ${_SERVICES} | awk '{print $1}') | sed -e "s/^k8s-gateway-api-demo-service-//"
        sed -i 's/__PREVIOUS_VERSION__/'"${_SERVICE_N_SHA}"'/g' overlays/prod-50-50/kustomization.yaml
        export _SERVICE_N_PLUS_1_SHA = $(echo ${_SERVICES} | awk '{print $2}' | sed -e "s/^k8s-gateway-api-demo-service-//")
        sed -i 's/__VERSION__/'"${_SERVICE_N_PLUS_1_SHA}"'/g' overlays/prod-50-50/kustomization.yaml
        kustomize build overlays/prod-50-50 --output ../sp1-config-sync-app-owner/gateway-api-demo-app-http-route.yaml

        cd ../sp1-config-sync-app-owner

        git add . && \
        git commit -m "Rendered: ${SHORT_SHA}
          Built from commit ${COMMIT_SHA} of repository foo-config-source - main branch 
          Author: $(git log --format='%an <%ae>' -n 1 HEAD)" && \
        git push origin main
      else 
        echo "check your services"; 
      fi
    else 
      echo "Failed to connect to the cluster. Check your API server"
      cat errors.txt
    fi  
    
  secretEnv: ['GITHUB_EMAIL', 'GITHUB_USERNAME', 'GITHUB_TOKEN']


availableSecrets:
  secretManager:
  - versionName: projects/sp1-21-gateway/secrets/docker-password/versions/1
    env: 'DOCKER_HUB_PASSWORD'
  - versionName: projects/sp1-21-gateway/secrets/docker-username/versions/1
    env: 'DOCKER_HUB_USERNAME'
  - versionName: projects/${PROJECT_ID}/secrets/github-username/versions/1 
    env: 'GITHUB_USERNAME'
  - versionName: projects/${PROJECT_ID}/secrets/github-token/versions/1 
    env: 'GITHUB_TOKEN'
  - versionName: projects/${PROJECT_ID}/secrets/github-email/versions/1 
    env: 'GITHUB_EMAIL'
