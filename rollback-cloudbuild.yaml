steps:
# Render HTTPRoute to rollout 100% traffic to N+1
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
  id: Render New HTTPRoute and Commit to config-sync-app-owner repo
  entrypoint: 'bash'
  args:
  - '-eEuo'
  - 'pipefail'
  - '-c'
  - |-
    echo "Current Directory is -------"
    pwd
    cd config-ci-cd
    
    # Consider a better way to ensure new version of the app/service is deployed
    sleep 15 
    
    gcloud container clusters get-credentials s1p-demo --zone=us-central1-c
    export _SERVICES=$(kubectl get service -n foo --sort-by=.metadata.creationTimestamp | awk '{print $1}' | tail -n +2)
    export _NO_OF_SERVICES=$(echo ${_SERVICES} | wc -l)
    if [[ "${_NO_OF_SERVICES}" == "2" ]]; 
    then 
      echo "got 2"; 
      export _SERVICE_N_SHA = $(echo ${_SERVICES} | awk '{print $1}') | sed -e "s/^k8s-gateway-api-demo-service-//"
      sed -i 's/__VERSION__/'"${_SERVICE_N_SHA}"'/g' overlays/prod-100p/kustomization.yaml
      
      kustomize build overlays/prod-100p --output ../sp1-config-sync-app-owner/gateway-api-demo-app-http-route.yaml

      cd ../sp1-config-sync-app-owner
      export _SERVICE_N_PLUS_1_SHA = $(echo ${_SERVICES} | awk '{print $2}' | sed -e "s/^k8s-gateway-api-demo-service-//")
      echo "Removing N+1 deployment gateway-api-demo-app-${_SERVICE_N_PLUS_1_SHA}"
      rm gateway-api-demo-app-${_SERVICE_N_PLUS_1_SHA}

      git add . && \
      git commit -m "Rendered: ${SHORT_SHA}
        Built from commit ${COMMIT_SHA} of repository foo-config-source - main branch 
        Author: $(git log --format='%an <%ae>' -n 1 HEAD)" && \
      git push origin main
    else 
      echo "check your services"; 
    fi
    
  secretEnv: ['GITHUB_EMAIL', 'GITHUB_USERNAME', 'GITHUB_TOKEN']


availableSecrets:
  secretManager:
  - versionName: projects/sp1-21-gateway/secrets/docker-password/versions/1
    env: 'DOCKER_HUB_PASSWORD'
  - versionName: projects/sp1-21-gateway/secrets/docker-username/versions/1
    env: 'DOCKER_HUB_USERNAME'
  - versionName: projects/${PROJECT_ID}/secrets/github-username/versions/1 
    env: 'GITHUB_USERNAME'
  - versionName: projects/${PROJECT_ID}/secrets/github-token/versions/1 
    env: 'GITHUB_TOKEN'
  - versionName: projects/${PROJECT_ID}/secrets/github-email/versions/1 
    env: 'GITHUB_EMAIL'
